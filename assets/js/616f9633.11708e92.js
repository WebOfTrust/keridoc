"use strict";(self.webpackChunkkeridoc=self.webpackChunkkeridoc||[]).push([[4811],{6900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var c=n(4848),s=n(8453);const r={status:"draft"},i="Check and accept PR production KERISSE site locally",o={id:"how-we-did/keridoc/check-and-accept-pr-production-edusite-locally",title:"Check and accept PR production KERISSE site locally",description:"Why this how-we-did: To test pull request offered before accepting them in github",source:"@site/docs/how-we-did/04_keridoc/check-and-accept-pr-production-edusite-locally.md",sourceDirName:"how-we-did/04_keridoc",slug:"/how-we-did/keridoc/check-and-accept-pr-production-edusite-locally",permalink:"/keridoc/docs/how-we-did/keridoc/check-and-accept-pr-production-edusite-locally",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{status:"draft"},sidebar:"tutorialSidebar",previous:{title:"Cheat sheet: writing a page inside /docs",permalink:"/keridoc/docs/how-we-did/keridoc/cheat-sheet-writing-page"},next:{title:"Create Omnigraffle infographic and convert to SVG",permalink:"/keridoc/docs/how-we-did/keridoc/create-omnigraffle-infographic-and-convert-to-svg"}},l={},d=[{value:"Pull the proposed changes in",id:"pull-the-proposed-changes-in",level:2},{value:"Test",id:"test",level:2},{value:"After succesfull test  merge result",id:"after-succesfull-test--merge-result",level:2},{value:"After merge push to production environment",id:"after-merge-push-to-production-environment",level:2},{value:"Result: PR remotely accepted",id:"result-pr-remotely-accepted",level:2},{value:"Clean up",id:"clean-up",level:2}];function a(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"check-and-accept-pr-production-kerisse-site-locally",children:"Check and accept PR production KERISSE site locally"}),"\n",(0,c.jsxs)(t.p,{children:["Why this ",(0,c.jsx)(t.em,{children:"how-we-did"}),": To test pull request offered before accepting them in github"]}),"\n",(0,c.jsx)(t.p,{children:"For who: crew responsible for acceptance of PRs offered by content developers"}),"\n",(0,c.jsx)(t.p,{children:"What is the objective: To check content and code that is uploaded to the team as a PR."}),"\n",(0,c.jsx)(t.h2,{id:""}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"git stash \ngit status\ngit fetch upstream main\ngit log\n"})}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"fix-mdfiles"})," is the name of the PR."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"testSC1"})," is the acronym of the developer that I use in this example."]}),"\n"]}),"\n",(0,c.jsx)(t.h2,{id:"pull-the-proposed-changes-in",children:"Pull the proposed changes in"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"git checkout -b testSC1  \ngit fetch upstream\ngit merge upstream/fix-mdfiles\n"})}),"\n",(0,c.jsx)(t.h2,{id:"test",children:"Test"}),"\n",(0,c.jsx)(t.p,{children:"Now the changes that the PR proposes have been locally applied to the new branch"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"npm run build\nnpm run serve\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Now you can locally test the site at the address that look something like ",(0,c.jsx)(t.code,{children:"http://localhost:3000keridoc/"}),". The result of ",(0,c.jsx)(t.code,{children:"npm run serve"})," will tell you the exact URL."]}),"\n",(0,c.jsx)(t.h2,{id:"after-succesfull-test--merge-result",children:"After succesfull test  merge result"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"git checkout main\ngit merge testSC1\n"})}),"\n",(0,c.jsx)(t.h2,{id:"after-merge-push-to-production-environment",children:"After merge push to production environment"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"git push -u upstream main\n"})}),"\n",(0,c.jsx)(t.h2,{id:"result-pr-remotely-accepted",children:"Result: PR remotely accepted"}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.img,{src:"https://hackmd.io/_uploads/SkPSW_L6i.png",alt:""})}),"\n",(0,c.jsx)(t.h2,{id:"clean-up",children:"Clean up"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",children:"git stash pop\ngit branch -D testSC1\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var c=n(6540);const s={},r=c.createContext(s);function i(e){const t=c.useContext(r);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),c.createElement(r.Provider,{value:t},e.children)}}}]);